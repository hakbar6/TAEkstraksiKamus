{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Y3wWpzb8CSAz"},"outputs":[],"source":["import pandas as pd\n","from sklearn.cluster import KMeans\n","import numpy as np\n","from ast import literal_eval\n","import re"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YpQsaIpnNKHd","executionInfo":{"status":"ok","timestamp":1686048297953,"user_tz":-420,"elapsed":2807,"user":{"displayName":"Raden Fausta Anugrah Dianparama","userId":"17257992174951473980"}},"outputId":"4ac0fb3c-3f04-4cd3-ecc1-8d007eee8e35"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["def rapi(s):\n","    ret = ''\n","    for ch in str(s):\n","        if ch == '-' or ch.isalpha() or ch == ' ':\n","            ret += ch\n","    return ret.strip().lower()"],"metadata":{"id":"6qSKFPOO_XZ6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def ubah2(s):\n","    s = str(s)\n","    while len(s) > 0 and (not s[0].isalpha()):\n","        s = s[1:]\n","    while len(s) > 0 and (not s[-1].isalpha()):\n","        s = s[:-1]\n","    return s"],"metadata":{"id":"EJA8apeM-i7U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def ubah(ls):\n","    while len(ls) > 0:\n","        while((len(ls[0][0]) > 0) and (not str(ls[0][0])[0].isalpha())):\n","            ls[0][0] = ls[0][0][1:]\n","        if len(ls[0][0]) == 0:\n","            ls = ls[1:]\n","        else:\n","            break\n","    while len(ls) > 0:\n","        while((len(ls[-1][0]) > 0) and (not str(ls[-1][0])[-1].isalpha())):\n","            ls[-1][0] = ls[-1][0][:-1]\n","        if len(ls[-1][0]) == 0:\n","            ls = ls[:-1]\n","        else:\n","            break\n","    return ls"],"metadata":{"id":"BoYVaOb7-Iif"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nttcHGUECSA1"},"outputs":[],"source":["def tidyUp(df, arrow_list):\n","    last_main_entry = ''\n","    kata_asal_list = []\n","    POS_list = []\n","    kata_tujuan_list = []\n","    makna_list = []\n","    contoh_kalimat_list = []\n","    contoh_kalimat_font_size_pos_list = []\n","    main_entry_list = []\n","    kata_turunan_list = []\n","    is_anomali_list = []\n","    need_update_symbol = 0\n","    main_entry_symbol = ''\n","    subentry_symbol = ''\n","    data_simbol_df = data_simbol[data_simbol['nomor'] == int(nomor)]\n","    if len(data_simbol_df) > 0:\n","        need_update_symbol = 1\n","        for i, row in data_simbol_df.iterrows():\n","            main_entry_symbol = row['entri_pokok']\n","            subentry_symbol = row['subentri']\n","    print(main_entry_symbol, subentry_symbol)\n","\n","    for i, _row in df.iterrows():\n","        row = df.loc[i].copy()\n","        ada = 0\n","        if row['is_anomali']:\n","            for arrow in arrow_list:\n","                split_list = str(row['kata_asal']).split(arrow)\n","                if len(split_list) == 2:\n","                    new_df = df[df.apply(lambda row: rapi(str(row['kata_asal'])) == rapi(split_list[1]), axis=1)]\n","                    if len(new_df) == 1:\n","                        new_row = new_df.iloc[0]\n","                        kata_asal_tmp = split_list[0]\n","                        df.loc[i] = new_row\n","                        df.loc[i,'kata_asal'] = kata_asal_tmp\n","                        row = new_row.copy()\n","                        row['kata_asal'] = kata_asal_tmp\n","                        ada = 1\n","                        break\n","        kata_asal = row['kata_asal']\n","        if row['main_entry'] == 0:\n","            if str(kata_asal)[0] == main_entry_symbol or str(kata_asal)[-1] == main_entry_symbol:\n","                kata_asal = str(kata_asal).replace(main_entry_symbol, str(last_main_entry))\n","\n","        kata_asal = rapi(kata_asal)\n","        kata_asal_list.append(kata_asal)\n","\n","        if row['main_entry'] == 1:\n","            last_main_entry = kata_asal\n","\n","        if(pd.isnull(row['POS'])):\n","            POS_list.append('')\n","        else:\n","            POS_list.append(row['POS'])\n","\n","        new_kata_tujuan = []\n","        for kata in literal_eval(df.iloc[i]['kata_tujuan']):\n","            new_kata_tujuan.append(rapi(kata))\n","        kata_tujuan_list.append(new_kata_tujuan)\n","\n","        new_makna = []\n","        for kata in literal_eval(df.iloc[i]['makna']):\n","            new_makna.append(rapi(kata))\n","        makna_list.append(new_makna)\n","\n","        if(pd.isnull(row['contoh_kalimat'])):\n","            contoh_kalimat = ''\n","        else:\n","            contoh_kalimat = row['contoh_kalimat']\n","\n","        if need_update_symbol:\n","            contoh_kalimat = str(contoh_kalimat).replace(main_entry_symbol, last_main_entry)\n","            if row['main_entry'] == 0:\n","                contoh_kalimat = str(contoh_kalimat).replace(subentry_symbol, str(kata_asal))\n","\n","        contoh_kalimat_list.append(ubah2(str(contoh_kalimat)))\n","\n","        new_contoh_kalimat_font_size_pos = []\n","        for contoh_kalimat in literal_eval(row['contoh_kalimat_font_size_pos']):\n","            if need_update_symbol:\n","                awal = contoh_kalimat[0]\n","                contoh_kalimat[0] = str(contoh_kalimat[0]).replace(main_entry_symbol, last_main_entry)\n","                if row['main_entry'] == 0:\n","                    contoh_kalimat[0] = str(contoh_kalimat[0]).replace(subentry_symbol, str(kata_asal))\n","            new_contoh_kalimat_font_size_pos.append(contoh_kalimat)\n","\n","        contoh_kalimat_font_size_pos_list.append(ubah(new_contoh_kalimat_font_size_pos))\n","\n","        main_entry_list.append(row['main_entry'])\n","\n","        if row['main_entry'] == 0 and ('-' not in str(row['kata_asal']) and (last_main_entry + ' ') not in str(row['kata_asal'])) and ((' ' + last_main_entry) not in str(row['kata_asal'])):\n","            kata_turunan_list.append(1)\n","        else:\n","            kata_turunan_list.append(0)\n","\n","        is_anomali_list.append(row['is_anomali'])\n","\n","\n","    ret = pd.DataFrame()\n","    ret['kata_asal'] = kata_asal_list\n","    ret['POS'] = POS_list\n","    ret['kata_tujuan'] = kata_tujuan_list\n","    ret['makna'] = makna_list\n","    ret['contoh_kalimat'] = contoh_kalimat_list\n","    ret['contoh_kalimat_font_size_pos'] = contoh_kalimat_font_size_pos_list\n","    ret['main_entry'] = main_entry_list\n","    ret['kata_turunan'] = kata_turunan_list\n","    ret['is_anomali'] = is_anomali_list\n","\n","    return ret"]},{"cell_type":"code","source":["data_simbol = pd.read_csv('/content/drive/MyDrive/TA Bareng Bareng/Laporan Mingguan TA Harakan Julian Fausta/Minggu 15 (Final)/Ekstraksi/X. Data Pendukung/Penggantian Simbol.csv')"],"metadata":{"id":"Gmvq8gUyFL7o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_simbol"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"bekX6pyOOVx5","executionInfo":{"status":"ok","timestamp":1686060516561,"user_tz":-420,"elapsed":697,"user":{"displayName":"Raden Fausta Anugrah Dianparama","userId":"17257992174951473980"}},"outputId":"b10f7eb8-7dfd-431f-feb2-0d35d1863ca3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   nomor entri_pokok subentri\n","0     18          --       --\n","1     54           -       ==\n","2     68          --        ~\n","3     71          --        ~"],"text/html":["\n","  <div id=\"df-c233d081-9f3d-472e-b14a-29dc92d1b0ae\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>nomor</th>\n","      <th>entri_pokok</th>\n","      <th>subentri</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18</td>\n","      <td>--</td>\n","      <td>--</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>54</td>\n","      <td>-</td>\n","      <td>==</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>68</td>\n","      <td>--</td>\n","      <td>~</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>71</td>\n","      <td>--</td>\n","      <td>~</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c233d081-9f3d-472e-b14a-29dc92d1b0ae')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c233d081-9f3d-472e-b14a-29dc92d1b0ae button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c233d081-9f3d-472e-b14a-29dc92d1b0ae');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["import os\n","from pathlib import Path\n","directory = \"/content/drive/MyDrive/TA Bareng Bareng/Laporan Mingguan TA Harakan Julian Fausta/Minggu 15 (Final)/Ekstraksi/\"\n","path = directory + '8. Cleaning Informasi Sumber Daya NLP/'\n","cnt = 0\n","daftar_kamus = [18,68,71,54,89]\n","for filename in os.listdir(directory + '7. Ekstraksi Informasi Sumber Daya NLP/'):\n","    if(filename[-3:] == 'csv' and filename[0].isnumeric()):\n","        nomor = filename.split('_')[0]\n","        # if int(nomor) not in daftar_kamus:\n","            # continue\n","        f = os.path.join(directory + '7. Ekstraksi Informasi Sumber Daya NLP/', filename)\n","        df = pd.read_csv(f)\n","        df = pd.read_csv(f)\n","        df_nice = tidyUp(df, ['→', '->', '-.', '-+'])\n","        df_nice.to_csv(path + nomor + \"_Nice.csv\", index = False)\n","        cnt += 1\n","        print('Done Kamus', nomor, '(Total', cnt, 'Kamus)')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bHVS7-Xl04bD","outputId":"325c2cc1-283b-4056-e9a1-a1aacca78d8e","executionInfo":{"status":"ok","timestamp":1686060882686,"user_tz":-420,"elapsed":65332,"user":{"displayName":"Raden Fausta Anugrah Dianparama","userId":"17257992174951473980"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-- --\n","Done Kamus 18 (Total 1 Kamus)\n","- ==\n","Done Kamus 54 (Total 2 Kamus)\n","-- ~\n","Done Kamus 68 (Total 3 Kamus)\n","-- ~\n","Done Kamus 71 (Total 4 Kamus)\n"," \n","Done Kamus 89 (Total 5 Kamus)\n"]}]}],"metadata":{"interpreter":{"hash":"31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"},"kernelspec":{"display_name":"Python 3.8.2 64-bit","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"colab":{"provenance":[{"file_id":"13VI4LO7KwEpYQ82U3RjR1cTw4_lU8aHg","timestamp":1694335326966}]}},"nbformat":4,"nbformat_minor":0}