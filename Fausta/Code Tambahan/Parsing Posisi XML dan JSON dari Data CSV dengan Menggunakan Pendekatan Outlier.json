{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Y3wWpzb8CSAz"},"outputs":[],"source":["import pandas as pd\n","from sklearn.cluster import KMeans\n","import numpy as np"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YpQsaIpnNKHd","executionInfo":{"status":"ok","timestamp":1681310240513,"user_tz":-420,"elapsed":4077,"user":{"displayName":"Raden Fausta Anugrah Dianparama","userId":"17257992174951473980"}},"outputId":"8c5c3f1c-8d2d-4374-8ee2-3e5c22e35672"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["def remove_outliers(data):\n","    q1, q2, q3 = np.percentile(data, [25, 50, 75])\n","    iqr = q3 - q1\n","    lower_bound = q1 - 1.5 * iqr\n","    upper_bound = q3 + 1.5 * iqr\n","    data_no_outliers = [x for x in data if x >= lower_bound and x <= upper_bound]\n","    if len(data) * 0.9 <= len(data_no_outliers):\n","      return data_no_outliers\n","    return data\n","\n","def findMid(ls, outlier):\n","    if outlier:\n","        ls = remove_outliers(ls)\n","    ls = sorted(ls)\n","    mid = -1\n","    mx = 0\n","    length = len(ls)\n","    for i in range(1, length):\n","        jar = ls[i] - ls[i - 1]\n","        if jar > mx:\n","            mx = jar\n","            mid = (ls[i] + ls[i - 1]) / 2.0\n","    return mid"],"metadata":{"id":"SOzcCpSztt87"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nttcHGUECSA1"},"outputs":[],"source":["def getPositionInterval(df, outlier = True, xml = False):\n","    entris = []\n","    fonts = []\n","    first_page = df.loc[0, 'page']\n","    last_page = df.loc[len(df)-1, 'page']\n","    for page in range(first_page, last_page + 1):\n","        df_page = df.loc[df['page'] == page]\n","        pos = []\n","        koloms = []\n","        tmp_entris = []\n","        font = []\n","        entri = ''\n","        for i, row in df_page .iterrows():\n","            if i == 0:\n","                lstX = row['x']\n","            if i > 0 and (last['x'] > row['x']):\n","                entri = entri[:-1]\n","                tmp_entris.append((entri, lstX))\n","                entri = ''\n","                font = []\n","                pos.append(row['x'])\n","                lstX = row['x']\n","\n","            if i > 0 and ((last['y'] > row['y'] + 100 and xml == False) or (last['y'] < row['y'] - 100 and xml == True)) and len(pos) > 1:\n","                entri = entri[:-1]\n","                tmp_entris.append((entri, lstX))\n","                entri = ''\n","\n","                mid = findMid(pos, outlier)\n","                tmp_entri = ''\n","                awal = True\n","                for entri, x in tmp_entris:\n","                    if x < mid:\n","                        if awal and len(entris) > 0:\n","                            entris[-1] += tmp_entri\n","                            awal = False\n","                        elif tmp_entri != '':\n","                            entris.append(tmp_entri)\n","                        tmp_entri = ''\n","                    tmp_entri += entri\n","                if tmp_entri != '':\n","                    entris.append(tmp_entri)\n","\n","                tmp_entris = []\n","                pos = []\n","                pos.append(row['x'])\n","                lstX = row['x']\n","\n","            entri += str(row['kata']) + ' '\n","            font.append(str(row['font']))\n","            last = row\n","\n","        entri = entri[:-1]\n","        tmp_entris.append((entri, lstX))\n","\n","        mid = findMid(pos, outlier)\n","        tmp_entri = ''\n","        awal = True\n","        for entri, x in tmp_entris:\n","            if x < mid:\n","                if awal and len(entris) > 0:\n","                    entris[-1] += tmp_entri\n","                    awal = False\n","                elif tmp_entri != '':\n","                    entris.append(tmp_entri)\n","                tmp_entri = ''\n","            tmp_entri += entri\n","        if tmp_entri != '':\n","            entris.append(tmp_entri)\n","\n","        idx1 = 0\n","        idx2 = 0\n","        entri = ''\n","    ret = pd.DataFrame()\n","    ret['Entri'] = entris\n","    return ret"]},{"cell_type":"code","source":["def remove_fonem(df, char_begin, char_end):\n","    ret = df.copy()\n","    for i, row in df.iterrows():\n","        clean = \"\"\n","        is_fonem = 0\n","        for ch in row['Entri']:\n","            if ch == char_begin and ch == char_end:\n","                is_fonem = 1 - is_fonem\n","                continue\n","            elif ch == char_begin:\n","                is_fonem = 1\n","                continue\n","            elif ch == char_end:\n","                is_fonem = 0\n","                continue\n","            if not is_fonem:\n","                clean += ch\n","        ret.iloc[i]['Entri'] = clean\n","    return ret\n"],"metadata":{"id":"IelE1jxx03js"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","from pathlib import Path\n","directory = \"/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 05/CSV from JSON\"\n","\n","path = '/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 09/Parsing Pos JSON With Outlier/'\n","isExist = os.path.exists(path)\n","if not isExist:\n","    os.makedirs(path)\n","\n","for filename in os.listdir(directory):\n","    f = os.path.join(directory, filename)\n","    df = pd.read_csv(f)\n","    hasil = getPositionInterval(df, outlier = True, xml = False)\n","    hasil.dropna()\n","    hasil = remove_fonem(hasil, '[', ']')\n","    hasil = remove_fonem(hasil, '/', '/')\n","    hasil.to_csv(path + filename[:2] + '.csv', index=False)\n"],"metadata":{"id":"yNOrxFK4Oq4r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","from pathlib import Path\n","directory = \"/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 05/CSV from JSON\"\n","\n","path = '/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 09/Parsing Pos JSON Without Outlier/'\n","isExist = os.path.exists(path)\n","if not isExist:\n","    os.makedirs(path)\n","\n","for filename in os.listdir(directory):\n","    f = os.path.join(directory, filename)\n","    df = pd.read_csv(f)\n","    hasil = getPositionInterval(df, outlier = False, xml = False)\n","    hasil.dropna()\n","    hasil = remove_fonem(hasil, '[', ']')\n","    hasil = remove_fonem(hasil, '/', '/')\n","    hasil.to_csv(path + filename[:2] + '.csv', index=False)\n"],"metadata":{"id":"qvXLiMh9MnXv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","from pathlib import Path\n","directory = \"/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 05/CSV from XML\"\n","\n","path = '/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 09/Parsing Pos XML With Outlier/'\n","isExist = os.path.exists(path)\n","if not isExist:\n","    os.makedirs(path)\n","\n","for filename in os.listdir(directory):\n","    f = os.path.join(directory, filename)\n","    df = pd.read_csv(f)\n","    hasil = getPositionInterval(df, outlier = True, xml = True)\n","    hasil.dropna()\n","    hasil = remove_fonem(hasil, '[', ']')\n","    hasil = remove_fonem(hasil, '/', '/')\n","    hasil.to_csv(path + filename[:2] + '.csv', index=False)\n"],"metadata":{"id":"IUveY_VsRhZ0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","from pathlib import Path\n","directory = \"/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 05/CSV from XML\"\n","\n","path = '/content/drive/MyDrive/TA Bareng Bareng/util/Minggu 09/Parsing Pos XML Without Outlier/'\n","isExist = os.path.exists(path)\n","if not isExist:\n","    os.makedirs(path)\n","\n","for filename in os.listdir(directory):\n","    f = os.path.join(directory, filename)\n","    df = pd.read_csv(f)\n","    hasil = getPositionInterval(df, outlier = False, xml = True)\n","    hasil.dropna()\n","    hasil = remove_fonem(hasil, '[', ']')\n","    hasil = remove_fonem(hasil, '/', '/')\n","    hasil.to_csv(path + filename[:2] + '.csv', index=False)\n"],"metadata":{"id":"SCV6_eTkIVk_"},"execution_count":null,"outputs":[]}],"metadata":{"interpreter":{"hash":"31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"},"kernelspec":{"display_name":"Python 3.8.2 64-bit","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}